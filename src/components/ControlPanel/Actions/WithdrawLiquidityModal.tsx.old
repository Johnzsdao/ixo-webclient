import React, { useEffect, useState } from 'react'
import cx from 'classnames'
import Lottie from 'react-lottie'
import styled from 'styled-components'
import { StepsTransactions } from 'components/StepsTransactions/StepsTransactions'
import PoolSelector from 'components/Pool/PoolSelector'
import PoolInfo from 'components/Pool/PoolInfo'
import LiquidityAmount from 'components/LiquidityAmount/LiquidityAmount'

import NextStepIcon from 'assets/images/modal/nextstep.svg'
import EyeIcon from 'assets/images/icon-eye.svg'

import pendingAnimation from 'assets/animations/transaction/pending.json'
import successAnimation from 'assets/animations/transaction/success.json'
import errorAnimation from 'assets/animations/transaction/fail.json'
import CheckIcon from 'assets/images/icon-check.svg'
import AirdropIcon from 'assets/images/exchange/airdrop.svg'
import ArrowUpDownIcon from 'assets/images/exchange/arrow-updown.svg'
import { thousandSeparator } from 'utils/formatters'

const Container = styled.div`
  position: relative;
  padding: 1.5rem 4rem;
  min-width: 34rem;
  min-height: 23rem;
`

const NextStep = styled.div`
  position: absolute;
  right: 10px;
  bottom: 30px;
  cursor: pointer;
`
const PrevStep = styled.div`
  position: absolute;
  left: 10px;
  bottom: 30px;
  cursor: pointer;
  transform: rotateY(180deg);
`

const TXStatusBoard = styled.div`
  & > .lottie {
    width: 80px;
  }
  & > .status {
    font-weight: 500;
    font-size: 12px;
    letter-spacing: 0.3px;
    color: #5a879d;
    text-transform: uppercase;
  }
  & > .message {
    font-size: 21px;
    color: #ffffff;
    text-align: center;
  }
  & > .transaction {
    border-radius: 100px;
    border: 1px solid ${(props): string => props.theme.highlight.light};
    padding: 10px 30px;
    cursor: pointer;
  }
`
const CheckWrapper = styled.div`
  position: relative;

  &.pe-none {
    pointer-events: none;
  }
  & > .check-icon {
    position: absolute;
    left: -12px;
    top: 50%;
    transform: translate(-50%, -50%);
  }
`

const StatusBar = styled.div`
  font-family: Roboto;
  font-style: normal;
  font-weight: 300;
  font-size: 12px;
  line-height: 22px;
  color: #83d9f2;
`

enum TXStatus {
  PENDING = 'pending',
  SUCCESS = 'success',
  ERROR = 'error',
}
interface Props {
  walletType: string
  accountAddress: string
  bondDid: string
}

const WithdrawLiquidityModal: React.FunctionComponent<Props> = ({
  // walletType,
  // accountAddress,
  bondDid,
}) => {
  const steps = ['Pool', 'Amount', 'Confirm', 'Sign']
  const [currentStep, setCurrentStep] = useState<number>(0)
  const [denoms] = useState(['ixo', 'xusd'])
  const [liquidity] = useState(1230254)
  const [APR] = useState(0.67)
  const [amounts, setAmounts] = useState<number[]>([0, 0])
  const [suppliedAmounts] = useState<number[]>([5000, 1200])

  const [signTXStatus] = useState<TXStatus>(TXStatus.PENDING)
  const [signTXhash] = useState<string>(null)

  const handlePrevStep = (): void => {
    setCurrentStep(currentStep - 1)
  }
  const handleNextStep = async (): Promise<void> => {
    setCurrentStep(currentStep + 1)
  }

  const handleViewTransaction = (): void => {
    window
      .open(
        `${process.env.REACT_APP_BLOCK_SCAN_URL}/transactions/${signTXhash}`,
        '_blank',
      )
      .focus()
  }

  const enableNextStep = (): boolean => {
    if (currentStep === 0) return true
    else if (currentStep === 1 && amounts[0] > 0 && amounts[1] > 0) return true
    else if (currentStep === 2) return true
    return false
  }
  const enablePrevStep = (): boolean => {
    return currentStep > 0 && currentStep < 3
  }

  const chooseAnimation = (txStatus): any => {
    switch (txStatus) {
      case TXStatus.PENDING:
        return pendingAnimation
      case TXStatus.SUCCESS:
        return successAnimation
      case TXStatus.ERROR:
        return errorAnimation
      default:
        return ''
    }
  }

  useEffect(() => {
    // eslint-disable-next-line
  }, [currentStep])

  const generateTXMessage = (txStatus: TXStatus): string => {
    switch (txStatus) {
      case TXStatus.PENDING:
        return 'Sign the Transaction'
      case TXStatus.SUCCESS:
        return 'Your transaction was successful!'
      case TXStatus.ERROR:
        return `Something went wrong!\nPlease try again`
      default:
        return ''
    }
  }

  const renderPoolInfoRow = (): JSX.Element =>
    currentStep < 3 && (
      <>
        <CheckWrapper className="mb-3">
          <PoolSelector
            label={bondDid.toUpperCase()}
            logo={AirdropIcon}
            placeholder="This is the Pool Name"
            border={currentStep === 0}
          />
          {currentStep === 2 && (
            <img className="check-icon" src={CheckIcon} alt="check-icon" />
          )}
        </CheckWrapper>
        <CheckWrapper className="mb-3">
          <PoolInfo
            label={`$${thousandSeparator(liquidity, ',')} Liquidity | <span>${(
              APR * 100
            ).toFixed(0)}% APR</span>`}
            logo={ArrowUpDownIcon}
            placeholder={denoms.join('/')}
            border={currentStep === 0}
          />
          {currentStep === 2 && (
            <img className="check-icon" src={CheckIcon} alt="check-icon" />
          )}
        </CheckWrapper>
      </>
    )
  const renderAmountInputRow = (): JSX.Element => {
    if (currentStep === 0) {
      return (
        <div className="d-flex justify-content-between">
          <LiquidityAmount
            amount={suppliedAmounts[0]}
            denom={denoms[0]}
            setAmount={(): void => {
              //
            }}
            disable={true}
          />
          <LiquidityAmount
            amount={suppliedAmounts[1]}
            denom={denoms[1]}
            setAmount={(): void => {
              //
            }}
            disable={true}
          />
        </div>
      )
    } else if (currentStep === 1 || currentStep === 2) {
      return (
        <CheckWrapper
          className={cx('d-flex', 'justify-content-between', {
            'pe-none': currentStep === 2,
          })}
        >
          <LiquidityAmount
            amount={amounts[0]}
            denom={denoms[0]}
            setAmount={(amount): void => setAmounts([amount, amounts[1]])}
            disable={currentStep !== 1}
          />
          <LiquidityAmount
            amount={amounts[1]}
            denom={denoms[1]}
            setAmount={(amount): void => setAmounts([amounts[0], amount])}
            disable={currentStep !== 1}
          />

          {currentStep === 2 && (
            <img className="check-icon" src={CheckIcon} alt="check-icon" />
          )}
        </CheckWrapper>
      )
    }
    return <></>
  }

  const renderStatusBar = (): JSX.Element =>
    currentStep < 3 && (
      <StatusBar className="mt-4">
        Exit Fee: <strong>0.3%</strong>
      </StatusBar>
    )

  const renderSignStep = (): JSX.Element =>
    currentStep === 3 && (
      <TXStatusBoard className="mx-4 d-flex align-items-center flex-column">
        <Lottie
          height={120}
          width={120}
          options={{
            loop: true,
            autoplay: true,
            animationData: chooseAnimation(signTXStatus),
          }}
        />
        <span className="status">{signTXStatus}</span>
        <span className="message">{generateTXMessage(signTXStatus)}</span>
        {signTXStatus === TXStatus.SUCCESS && (
          <div className="transaction mt-3" onClick={handleViewTransaction}>
            <img src={EyeIcon} alt="view transactions" />
          </div>
        )}
      </TXStatusBoard>
    )

  return (
    <Container>
      <div className="px-4 pb-4">
        <StepsTransactions
          steps={steps}
          currentStepNo={currentStep}
          handleStepChange={(): void => {
            //  handleStepChange
          }}
        />
      </div>

      {renderPoolInfoRow()}

      {renderAmountInputRow()}

      {renderSignStep()}

      {renderStatusBar()}

      {enableNextStep() && (
        <NextStep onClick={handleNextStep}>
          <img src={NextStepIcon} alt="next-step" />
        </NextStep>
      )}
      {enablePrevStep() && (
        <PrevStep onClick={handlePrevStep}>
          <img src={NextStepIcon} alt="prev-step" />
        </PrevStep>
      )}
    </Container>
  )
}

export default WithdrawLiquidityModal
